package org.parctice.app.codility;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class FrogRiverOne {
    public int solution(int X, int[] A) {
        boolean[] covered = new boolean[X];
        int leafPosition;
        int sumAllNumbers = sumOfNumbersTill(X);

        for (int time = 0; time < A.length; time++) {
            leafPosition = A[time];
            if (leafPosition <= X) {
                if (!covered[leafPosition - 1]) {
                    covered[leafPosition - 1] = true;
                    sumAllNumbers -= leafPosition;
                }
            }

            if (sumAllNumbers == 0)
                return time;
        }

        return -1;
    }

    private int sumOfNumbersTill(int x) {
        return (x * (x + 1)) / 2;
    }

    @Test
    public void arrayOfOnes() {
        assertEquals(0, solution(1, new int[]{1}));
        assertEquals(0, solution(1, new int[]{1, 1, 1}));
    }

    @Test
    public void iterativeArray() {
        assertEquals(2, solution(3, new int[]{1, 2, 3}));
        assertEquals(2, solution(3, new int[]{1, 2, 3, 4, 5, 6}));
    }

    @Test
    public void exampleTest() {
        assertEquals(6, solution(5, new int[]{1, 3, 1, 4, 2, 3, 5, 4}));
    }

    @Test
    public void noPath() {
        assertEquals(-1, solution(5, new int[]{1, 3, 1, 4, 2, 3, 3, 4}));
    }

    @Test
    public void smallX() {
        assertEquals(4, solution(3, new int[]{1, 2, 5, 7, 3}));
    }

    @Test // This one is O(n)
    public void bigRandomArray() {
        assertEquals(2484, solution(3, createBigRandomArray()));
    }

    @Test // This one is O(n*m)
    public void bigRandomArray_InitialSolution() {
        assertEquals(2484, new FrogRiverOneInitial().solution(3, createBigRandomArray()));
    }

    private int[] createBigRandomArray(){
        return new int[]{
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10, 11, 11, 12, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                3
        };
    }

    class FrogRiverOneInitial {
        private boolean[] covered;

        public int solution(int X, int[] A) {
            covered = new boolean[X];
            int leafPosition;

            for (int time = 0; time < A.length; time++) {
                leafPosition = A[time];
                if (leafPosition <= X)
                    covered[leafPosition - 1] = true;

                if (allCovered())
                    return time;
            }

            return -1;
        }

        private boolean allCovered() {
            for (boolean leafInWater : covered) {
                if (!leafInWater)
                    return false;
            }
            return true;
        }
    }
}
